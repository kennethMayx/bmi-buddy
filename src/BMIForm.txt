import React, { useState } from 'react';

function BMIForm({ userName, useMetric }) {
  const [height, setHeight] = useState('');
  const [weight, setWeight] = useState('');
  const [error, setError] = useState('');
  const [bmi, setBmi] = useState(null);
  const [category, setCategory] = useState('');

  const handleHeightChange = (e) => {
    const value = e.target.value;
    if (/^[\d.]*$/.test(value)) {
      setHeight(value);
      setError('');
    } else {
      setError('Height must be a number');
    }
  };

  const handleWeightChange = (e) => {
    const value = e.target.value;
    if (/^[\d.]*$/.test(value)) {
      setWeight(value);
      setError('');
    } else {
      setError('Weight must be a number');
    }
  };

  const getBMICategory = (bmi) => {
    if (bmi < 18.5) return "Underweight";
    if (bmi <= 24.9) return "Healthy Weight";
    if (bmi <= 29.9) return "Overweight";
    if (bmi >= 30.0) return "Obesity";
    return "Invalid BMI";
  };

  const calculateBMI = () => {
    if (!height || !weight) {
      setError('Please enter both height and weight');
      setBmi(null);
      setCategory('');
      return;
    }

    setError('');
    let bmiValue;

    if (useMetric) {
      const heightMeters = parseFloat(height) / 100;
      bmiValue = parseFloat(weight) / (heightMeters * heightMeters);
    } else {
      const heightParts = height.split('.');
      if (heightParts.length !== 2) {
        setError('Enter height as feet.inches (e.g., 5.8)');
        setBmi(null);
        setCategory('');
        return;
      }

      const feet = parseInt(heightParts[0], 10);
      const inches = parseInt(heightParts[1], 10);

      if (isNaN(feet) || isNaN(inches)) {
        setError('Invalid height format');
        setBmi(null);
        setCategory('');
        return;
      }

      const totalInches = feet * 12 + inches;
      bmiValue = (parseFloat(weight) / (totalInches * totalInches)) * 703;
    }

    const roundedBMI = parseFloat(bmiValue.toFixed(2));
    setBmi(roundedBMI);
    setCategory(getBMICategory(roundedBMI));
  };

  return (
    <div>
      <h2>Welcome{userName ? `, ${userName}` : ''}!</h2>
      <p>Enter your height and weight to calculate your BMI:</p>

      <input
        value={height}
        onChange={handleHeightChange}
        placeholder={useMetric ? "Height (cm)" : "Height (ft.in, e.g. 5.8)"}
      />
      <input
        value={weight}
        onChange={handleWeightChange}
        placeholder={useMetric ? "Weight (kg)" : "Weight (lbs)"}
      />

      {error && <p style={{ color: 'red' }}>{error}</p>}

      <button onClick={calculateBMI}>Calculate BMI</button>

      {bmi && (
        <div style={{ marginTop: '1rem' }}>
          {userName ? `${userName}, your BMI is: ${bmi}` : `Your BMI is: ${bmi}`}
          <p><strong>Category:</strong> {category}</p>
        </div>
      )}
    </div>
  );
}

export default BMIForm;